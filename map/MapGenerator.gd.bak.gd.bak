# map/MapGenerator.gd
# 地形数据处理器
class_name MapGeneratorBak

# 资源缓存
var _material_cache = {}

# 资源映射
var _asset_map = {
					 "森林": preload("res://kenney_pirate-kit/Models/OBJ format/grass-patch.obj"),
					 "山脉": preload("res://kenney_pirate-kit/Models/OBJ format/rocks-sand-a.obj"),
					 "河流": preload("res://kenney_nature-kit/Models/OBJ format/ground_pathBend.obj")
				 }

# 根据地形数据生成地图场景
func generate_from_data(data: Dictionary) -> Node3D:
	var map_root = Node3D.new()

	# 1. 生成地形基底
	var ground = _create_terrain(data)
	map_root.add_child(ground)

	# 2. 根据地形数据生成物体
	_generate_objects(data, map_root)

	# 3. 添加光照
	var sun = _create_sun_light(data)
	map_root.add_child(sun)

	# 4. 应用环境效果（在父节点添加）

	return map_root

# 生成地形基底（根据地形数据调整）
func _create_terrain(data: Dictionary) -> Node3D:
	var plane_mesh = PlaneMesh.new()
	plane_mesh.size = Vector2(20, 20)
	plane_mesh.subdivide_width = 10
	plane_mesh.subdivide_depth = 10

	# 根据地形类型调整基底
	var base_color: Color
	match data["biome"]:
		"魔法森林":
			base_color = Color(0.2, 0.4, 0.1)
		"沙漠":
			base_color = Color(0.8, 0.7, 0.4)
		"冰原":
			base_color = Color(0.9, 0.95, 1.0)
		_:
			base_color = Color(0.3, 0.6, 0.3)

	var mesh_instance = MeshInstance3D.new()
	mesh_instance.mesh = plane_mesh

	var material = StandardMaterial3D.new()
	material.albedo_color = base_color
	material.roughness = 0.9
	mesh_instance.material_override = material

	# 根据地形起伏调整高度
	var elevation_intensity = data.get("elevation", {}).get("intensity", 0.0)
	mesh_instance.position = Vector3(0, -1 - elevation_intensity * 3, 0)

	return mesh_instance

# 根据地形数据生成物体
func _generate_objects(data: Dictionary, parent: Node3D):
	var keywords = _convert_data_to_keywords(data)
	var multimeshes = {}

	for keyword in keywords:
		var asset_type = _get_asset_type(keyword)
		if asset_type:
			if not multimeshes.has(asset_type):
				multimeshes[asset_type] = {
					"positions": [],
					"mesh": _asset_map[asset_type]
				}

			# 根据植被密度调整数量
			var density = data.get("vegetation", {}).get("density", 1.0)
			var count = max(1, int(5 * density))

			for i in count:
				multimeshes[asset_type]["positions"].append(Vector3(
					randf_range(-8, 8),
					0,
					randf_range(-8, 8)
				))

	# 批量渲染物体
	for asset_type in multimeshes:
		# 修复：重命名内部变量避免冲突
		var mesh_data = multimeshes[asset_type]  # 将"data"改为"mesh_data"

		var multi_instance = MultiMeshInstance3D.new()
		multi_instance.multimesh = _create_multimesh(mesh_data["mesh"], mesh_data["positions"])

		# 修复：同步修改条件判断中的变量名
		if asset_type == "森林" and data.has("vegetation") and data["vegetation"].has("color"):
			var color_hex = data["vegetation"]["color"]
			multi_instance.material_override = _get_material_with_color(asset_type, color_hex)
		else:
			multi_instance.material_override = _get_material_by_type(asset_type)

		parent.add_child(multi_instance)

# 将地形数据转换为关键词
func _convert_data_to_keywords(data: Dictionary) -> Array:
	var keywords = []

	# 主要地形
	if data.has("biome"):
		keywords.append(data["biome"].to_lower())

	# 地形特征
	if data.has("elevation") and data["elevation"].get("intensity", 0.0) > 0.1:
		keywords.append("山脉")

	# 水域
	if data.has("water") and data["water"].get("coverage", 0.0) > 0:
		keywords.append("河流")

	return keywords

# 根据关键词获取资源类型
func _get_asset_type(keyword: String) -> String:
	var normalized = keyword.to_lower()
	match normalized:
		"森林", "树林", "丛林", "魔法森林":
			return "森林"
		"山脉", "山峰", "山丘", "火山", "积雪火山":
			return "山脉"
		"河流", "小溪", "湖泊", "水域":
			return "河流"
		_:
			return ""

# 创建多网格实例
func _create_multimesh(mesh: Mesh, positions: Array) -> MultiMesh:
	var multi = MultiMesh.new()
	multi.mesh = mesh if mesh else BoxMesh.new()
	multi.transform_format = MultiMesh.TRANSFORM_3D
	multi.instance_count = positions.size()

	for i in positions.size():
		multi.set_instance_transform(i, Transform3D().translated(positions[i]))

	return multi

# 获取带特定颜色的材质
func _get_material_with_color(type: String, color_hex: String) -> StandardMaterial3D:
	var mat = StandardMaterial3D.new()
	mat.albedo_color = Color(color_hex)

	match type:
		"森林":
			mat.roughness = 0.8
		"山脉":
			mat.metallic = 0.4
		"河流":
			mat.metallic = 0.9
			mat.roughness = 0.1

	return mat

# 获取标准材质
func _get_material_by_type(type: String) -> StandardMaterial3D:
	if not _material_cache.has(type):
		var mat = StandardMaterial3D.new()
		match type:
			"森林":
				mat.albedo_color = Color(0.1, 0.6, 0.1)
				mat.roughness = 0.8
			"山脉":
				mat.albedo_color = Color(0.5, 0.4, 0.3)
				mat.metallic = 0.4
			"河流":
				mat.albedo_color = Color(0.2, 0.4, 1.0)
				mat.metallic = 0.9
				mat.roughness = 0.1
			"积雪火山":
				mat.albedo_color = Color(0.95, 0.95, 0.98)
				mat.metallic = 0.3
				mat.roughness = 0.7
		_material_cache[type] = mat
	return _material_cache[type]

# 创建日光（根据大气条件调整）
func _create_sun_light(data: Dictionary) -> DirectionalLight3D:
	var sun = DirectionalLight3D.new()
	sun.light_energy = 1.2

	# 根据光照条件调整角度和颜色
	var light_condition = data.get("atmosphere", {}).get("light", "白天")
	match light_condition:
		"黄昏":
			sun.rotation_degrees = Vector3(-100, 30, 0)
			sun.light_color = Color(1.0, 0.7, 0.5)
		"夜晚":
			sun.rotation_degrees = Vector3(-150, 30, 0)
			sun.light_color = Color(0.5, 0.6, 1.0)
			sun.light_energy = 0.5
		_: # 白天
			sun.rotation_degrees = Vector3(-120, 45, 0)

	return sun
