#ai_service_v3.gd
extends Node

const SILICONFLOW_API = "https://api.siliconflow.cn/v1/chat/completions"  # 硅基流动 API 地址 [5](@ref)
var api_key = ""  # 从外部配置读取

func _ready():
	print("user://config.cfg 实际路径为：",OS.get_user_data_dir()  + "/config.cfg")

	var config_manager = ConfigManager.new()
	var config = config_manager.load_config()

	if config:
		api_key = config.get_value("api", "siliconflow_key", "")
		if api_key == "":
			push_warning("API密钥为空，请检查配置文件")
	else:
		push_error("无法加载配置文件")
		
# 地形解析函数（对接硅基流动 DeepSeek-V3 Pro）
func analyze_terrain(prompt: String) -> Dictionary:
#	例如：一片被迷雾笼罩的魔法森林，远处有积雪的火山
	var system_prompt = """
	你是一个专业的地形生成AI，请将用户描述转换为JSON格式的地形参数（不要包含任何Markdown或代码块）：
	{
		"biome": "地形类型(如:魔法森林/沙漠/冰原)",
		"elevation": {"type": "地形特征", "intensity": 0.0-1.0},
		"water": {"type": "水域类型", "coverage": 0.0-1.0},
		"vegetation": {"density": 0.0-1.0, "color": "HEX颜色"},
		"position": {
			"reference_point": "参考点(如:火山/河流)",
			"distance": 0.0-1.0
		},
		"atmosphere": {"light": "白天/夜晚/黄昏", "weather": "晴朗/雾/雨"}
		"settlements": {"type": "村庄/城堡", "density": 0.0-1.0}
	}
	// 位置转换规则：
	"远处" -> distance=0.8, 
	"山下" -> distance=0.2,
	"附近" -> distance=0.3
	"""
# 量词转换："一片" -> density=0.7, "少量" -> density=0.3
# "远处" -> distance=0.8, "山下" -> distance=0.2
	var request = {
					  "model": "Pro/deepseek-ai/DeepSeek-V3",  # 硅基流动 Pro 版模型 [5](@ref)
					  "messages": [
						  {"role": "system", "content": system_prompt},
						  {"role": "user", "content": prompt}
					  ],
					  "temperature": 0.3,
					  "max_tokens": 300
				  }

	# 重试机制
	var retry_count = 0
	while retry_count < 3:
		var response = await _send_siliconflow_request(request)
		print("response：",response)
		if response.has("error"):
			push_warning("AI请求失败: " + response.error)
			retry_count += 1
			await get_tree().create_timer(1.0).timeout
		else:
			# 提取实际的 JSON 数据（去除 Markdown 代码块）
			var raw_content = response.choices[0].message.content
			var json_content = raw_content
			
			# 尝试去除 Markdown 代码块
			if "json" in raw_content:
				json_content = raw_content.replace("json", "").replace("", "").strip_edges()
			elif "" in raw_content: 
				json_content = raw_content.replace("", "").strip_edges()
				
			print("处理后的JSON内容: ", json_content)
			# 使用新的 JSON 解析方式
			var json = JSON.new()
			var parse_error = json.parse(json_content)

			if parse_error == OK:
				# 获取解析后的数据
				var parsed_data = json.get_data()
				if parsed_data is Dictionary:
					return parsed_data
				else:
					push_error("解析结果不是字典类型: ", response.choices[0].message.content)
			else:
				push_error("JSON解析失败: ", json.get_error_message(), " at line ", json.get_error_line())

			return {}  # 失败时返回空字典

	return {}  # 失败时返回空字典


# 硅基流动 API 请求函数
func _send_siliconflow_request(request_data: Dictionary) -> Dictionary:
	var headers = [
				  "Content-Type: application/json",
				  "Authorization: Bearer " + api_key  # 从外部注入的 Key
				  ]

	var http_request = HTTPRequest.new()
	add_child(http_request)

	var error = http_request.request(
					SILICONFLOW_API,
					headers,
					HTTPClient.METHOD_POST,
					JSON.stringify(request_data)
				)

	if error != OK:
		return {"error": "HTTP请求初始化失败"}

	var result = await http_request.request_completed
	http_request.queue_free()

	if result[0] != HTTPRequest.RESULT_SUCCESS:
		return {"error": "网络错误: " + str(result[0])}

	# 解析响应体
	var response_text = result[3].get_string_from_utf8()
	var json = JSON.new()
	var parse_error = json.parse(response_text)

	if parse_error == OK:
		var response_body = json.get_data()
		return response_body if "choices" in response_body else {"error": "API响应格式错误"}
	else:
		return {"error": "JSON解析失败: " + json.get_error_message()}
